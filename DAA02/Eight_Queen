// DAA Practical 5 - 8 queens problem

public class Main {
    final static int N = 8; // Size of the chessboard

    // Function to print the chessboard
    static void printBoard(int[][] board) {
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();
    }

    // Function to check if a Queen can be placed at board[row][col]
    static boolean isSafe(int[][] board, int row, int col) {
        // Check the column above
        for (int i = 0; i < row; i++) {
            if (board[i][col] == 1) return false;
        }

        // Check upper left diagonal
        for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 1) return false;
        }

        // Check upper right diagonal
        for (int i = row, j = col; i >= 0 && j < N; i--, j++) {
            if (board[i][j] == 1) return false;
        }

        return true;
    }

    // Recursive function to solve the 8-Queens problem
    static void solveNQueens(int[][] board, int row) {
        if (row == N) {
            printBoard(board);
            return;
        }

        // The first Queen is already placed, so we skip the first column
        for (int i = 1; i < N; i++) {
            if (isSafe(board, row, i)) {
                board[row][i] = 1;
                solveNQueens(board, row + 1);
                board[row][i] = 0; // Backtrack if placing at (row, i) doesn't lead to a solution
            }
        }
    }

    public static void main(String[] args) {
        int[][] board = new int[N][N];

        // Assuming the first Queen is placed at (0, 0)
        board[0][0] = 1;

        solveNQueens(board, 1);
    }
}
